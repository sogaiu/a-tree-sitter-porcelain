#! /bin/sh

# shellcheck disable=SC2034
this_script_desc="Make symlink to limit tree-sitter scanning"

this_script=$(readlink -f "$0")
this_script_dir=$(dirname "$this_script")
this_script_name=$(basename "$this_script")

# shellcheck source=.common
. "$this_script_dir/.common"

########################################################################

cur_dir=$(pwd)

deprintf "%s: start\n" "$this_script_name"

cd "$ATSP_LANG_ROOT" || exit 1

########################################################################

# XXX: various tree-sitter subcommands can lead to scanning of
#      directories looking for grammar directories that can have their
#      content automatically compiled and made accessible to
#      tree-sitter.  there may be more than one problem with this
#      functionality, but one clear problem is that it can lead to
#      different versions of the same language's grammar having .so
#      files be used by tree-sitter.  this can be confusing during
#      testing or otherwise interpreting the results of tree-sitter
#      subcommands.
#
#      there doesn't appear to be a nice way to turn off this scanning
#      behavior nor a way to explicitly tell tree-sitter to use one
#      specific .so or perhaps to only use specifically one grammar.
#
#      there is a way to work around this provided one only executes
#      tree-sitter subcommands in the top level of one's grammar
#      directory, but it requires an as yet unreleased tree-sitter
#      that has TREE_SITTER_LIBDIR functionality built in.  the
#      release after 0.20.7 may end up having this.
#
#      in any case, the steps to set this up are:
#
#      1. create symlink in grammar directory with a name that starts
#         with tree-sitter- and have it point to "." (no quotes).
#         it's likely less confusing to name the link
#         "tree-sitter-<name>" where <name> refers to the language for
#         the grammar as it will appear in output for at least one
#         tree-sitter subcommand.
#
#      2. create a .tree-sitter subdirectory in the grammar directory
#
#      3. arrange for the TREE_SITTER_DIR env var to point at the
#         .tree-sitter subdirectory.
#
#      4. put a config.json file in the aforementioned .tree-sitter
#         directory.
#
#      5. put an entry for "parser-directories" (an array or list)
#         that has a single element "."  (yes quotes this time).  so
#         the file might contain:
#
#         {
#           "parser-directories": [
#             "."
#           ]
#         }
#
#      run `tree-sitter dump-languages` to verify which gramamars are
#      recognized and how many there are.
#
#      the goal is to have one and have it be the current one.

if [ "" = "$ATSP_LANG" ]; then
  eprintf "* Expected ATSP_LANG to be set but did not, exiting.\n"
  exit 1
fi

link_name=tree-sitter-"$ATSP_LANG"

# XXX: was used for the dump script
#hack_link=$(ls -d "$link_name" 2> /dev/null || printf "None")
#hack_link_deref=$(readlink "$link_name" 2> /dev/null || printf "None")

deprintf "* Checking if symbolic link exists already: %s\n" "$link_name"

if [ ! -e "$link_name" ]; then
  deprintf "* Didn't find.\n"
else
  eprintf "* Found, creation not needed...exiting.\n"
  deprintf "%s: abort\n" "$this_script_name"
  exit 1
fi

sys_type=$("$ATSP_UTIL"/sys-type)

deprintf "* Invoking ln -sf\n"

# for msys2 / mingw64, need env var MSYS to be set to winsymlinks:nativestrict
# from some version of windows 10 and beyond(?), setting up developer mode
# allows use of symlinks
if [ "$sys_type" = "MINGW64" ]; then
  MSYS=winsymlinks:nativestrict ln -sf . "$link_name"
else
  ln -sf . "$link_name"
fi

deprintf "* To get limiting to work fully, see footnote in a comment of:\n"

deprintf "    tree-sitter/tree-sitter#2017\n"

########################################################################

cd "$cur_dir" || exit 1

deprintf "%s: end\n" "$this_script_name"
