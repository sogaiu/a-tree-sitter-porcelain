#! /bin/sh
# shellcheck disable=SC2034

# common values across scripts

# https://stackoverflow.com/a/1638397
#
# account for symlink use
THIS_SCRIPT=$(readlink -f "$0")
THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")

ATSP_ROOT=$(realpath "${THIS_SCRIPT_DIR}/..")

ATSP_CONF="${ATSP_ROOT}"/conf
ATSP_TASK="${ATSP_ROOT}"/task
ATSP_UTIL="${ATSP_ROOT}"/util

# shellcheck source=../conf
. "${ATSP_CONF}"

# the parser project directory
PARSER_PROJ_DIR=$(realpath "$THIS_SCRIPT_DIR"/../..)

########################################################################

# XXX: it may be that this file needs to protect against certain
#      variables not having values.  specifically, those that are in
#      the conf file?
#
#      e.g. if ATSP_LANG is not set, then hack-symlink will create an
#      incorrect symlink

########################################################################

# path to tree-sitter cli binary
#
# >= 0.19.4 added --no-bindings
# >= 0.20.3 added --abi
# <= 0.20.7 didn't have TREE_SITTER_LIBDIR support
#
# XXX: note that version string from binary may not be a good way to
#      compare versions because unreleased things appear to use the
#      same version string
ATSP_TS_PATH=${ATSP_TS_PATH:-tree-sitter}

TREE_SITTER_DIR=${TREE_SITTER_DIR:-${PARSER_PROJ_DIR}/.tree-sitter}

# XXX: the env var TREE_SITTER_LIBDIR only affects the tree-sitter cli
#      for versions beyond 0.20.7 -- we use it here for convenient
#      expression but just put its value in SO_INSTALL_DIR and use
#      that instead

# XXX: if computed, same as via the so-install-dir util script below
TREE_SITTER_LIBDIR=${TREE_SITTER_LIBDIR:-${TREE_SITTER_DIR}/lib}

# XXX: can we not just use TREE_SITTER_LIBDIR?
# where the shared object is looked for by tree-sitter cli
SO_INSTALL_DIR=$("${ATSP_UTIL}"/so-install-dir "${TREE_SITTER_DIR}")

# path to installed shared object
INSTALLED_SO_PATH=$("${ATSP_UTIL}"/installed-so-path "${SO_INSTALL_DIR}")

# build directory for shared object
#
# separating this from src has the following benefits:
#
# * easier to pick out what is src and what is produced
#   * can matter if wanting to remove files (e.g. cleaning)
#   * less to observe manually per set of items
# * multiple separate builds can be done without clobbering previous results
# * less clutter
#
# may be BUILD_DIR_NAME is not a good choice if exposing to outside?
#
# NOTE: making this the same as src will make some values in this program
#       incorrect so don't do that
#
# NOTE: a value that is a subdirectory of build is better than build because
#       build can also contain node or rust bindings.  don't want to
#       accidentally delete those

# XXX: could have a script that fetches a default value - reduce duplication
#      with Makefile?
BUILD_DIR_NAME=${BUILD_DIR_NAME:-build/atsp}
BUILD_DIR_PATH=${PARSER_PROJ_DIR}/${BUILD_DIR_NAME}
