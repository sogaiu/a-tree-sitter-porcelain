#! /bin/sh

# shellcheck disable=SC2034
THIS_SCRIPT_DESC="Build a .wasm file for a grammar"

THIS_SCRIPT=$(readlink -f "$0")
THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")
THIS_SCRIPT_NAME=$(basename "$THIS_SCRIPT")

# shellcheck source=.common
. "${THIS_SCRIPT_DIR}/.common"

########################################################################

cur_dir=$(pwd)

deprintf "Working on building parser .wasm.\n"

cd "${PARSER_PROJ_DIR}" || exit 1

deprintf "\n"

if [ -f src/parser.c ]; then
  deprintf "* Found src/parser.c.\n"
else
  deprintf "* Failed to find src/parser.c...attempting to generate.\n"

  "${THIS_SCRIPT_DIR}"/gen-src
  result=$?

  if [ 0 -eq "${result}" ]; then
    deprintf "* Continuing with %s.\n" "${THIS_SCRIPT_NAME}"
  else
    eprintf "* Aborting %s\n" "${THIS_SCRIPT_NAME}"
    exit 1
  fi
fi

# XXX: the following may be brittle as it depends on emscripten
#      internals.
#
#      observing the output of running emsdk_env.* should indicate
#      which environment variables are expected to have which
#      particular values so if the following breaks, the
#      aforementioned output could be one place to look for clues.
#
# XXX: not sure how to integrate emsdk_env.sh...
#
#      might not be possble because one needs to . or source it?
#
#        https://lists.gnu.org/archive/html/help-make/2006-04/msg00142.html
#
#      the output of sourcing displays which env vars are set and what
#      they are set to.  a hack would be to capture and parse that output?
#      some attempts at this failed -- "source" doesn't work via
#      $(shell ,,,) and "." didn't work out for different reasons
#
#      running EMSDK_QUIET=1 python ~/src/emsdk/emsdk.py construct_env
#      produces output of the form:
#
#        export PATH="...";
#        export EMSDK="...";
#        export EMSDK_NODE="...";
#        unset EMSDK_QUIET;
#
#      possibly that could be parsed...but seems like a lot of work

# XXX: doing the following as an experiment.  may be brittle though if
#      emscripten changes certain things

### start duplication

# try getting a value from conf file
emsdk=${ATSP_EMSDK:-"$("${ATSP_UTIL}"/atsp-emsdk)"}

if [ "" = "${emsdk}" ]; then
 eprintf "* Did not find an appropriate value for emsdk directory\n"
 exit 1
fi

if [ ! -d "${emsdk}" ]; then
 eprintf "* emsdk value not a directory: %s\n" "${emsdk}"
 exit 1
fi

emsdk=$(realpath "${emsdk}")

deprintf "* emsdk: %s\n" "${emsdk}"

# some consistency checking
#
# XXX: this should work as long as emsdk_env.* keeps setting the
#      EMSDK_NODE env var?
if [ ! -d "${emsdk}/node" ]; then
  eprintf "* emsdk directory doesn't look right: %s\n" "${emsdk}"
  exit 1
fi

### end duplication

emscripten="${emsdk}/upstream/emscripten"

# XXX: is there a guarantee that this will yield a single value?
# XXX: validate node_version value somehow?
node_version=$(ls "${emsdk}/node")

node_bin_dir_path="${emsdk}/node/${node_version}/bin"
emsdk_node="${node_bin_dir_path}/node"

export EMSDK="${emsdk}"
export EMSDK_NODE="${emsdk_node}"
export PATH="${emsdk}:${emscripten}:${node_bin_dir_path}:${PATH}"

deprintf "* Invoking tree-sitter build-wasm subcommand\n"

# XXX: possibly need to make TREE_SITTER_DIR / TREE_SITTER_LIBDIR
#      available via export?  don't think so as those are only
#      necessary for parsing-like activities?

${ATSP_TS_PATH} build-wasm

deprintf "\n"

cd "${cur_dir}" || exit 1

deprintf "Done\n"
