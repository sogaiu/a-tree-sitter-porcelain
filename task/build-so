#! /bin/sh

# shellcheck disable=SC2034
THIS_SCRIPT_DESC="Build a shared object for a grammar"

THIS_SCRIPT=$(readlink -f "$0")
THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")
THIS_SCRIPT_NAME=$(basename "$THIS_SCRIPT")

# shellcheck source=.common
. "${THIS_SCRIPT_DIR}/.common"

########################################################################

cur_dir=$(pwd)

cd "${PARSER_PROJ_DIR}" || exit 1

deprintf "Working on building shared object.\n";

if [ -f src/parser.c ]; then
  deprintf "* Found src/parser.c.\n"
else
  deprintf "* Failed to find src/parser.c...attempting to generate.\n"

  "${THIS_SCRIPT_DIR}"/gen-src
  result=$?

  if [ 0 -eq "${result}" ]; then
    deprintf "* Continuing with %s.\n" "${THIS_SCRIPT_NAME}"
  else
    eprintf "* Aborting %s\n" "${THIS_SCRIPT_NAME}"
    exit 1
  fi
fi

deprintf "* Ensuring build directory exists at:\n"

deprintf "    %s\n" "${BUILD_DIR_PATH}"

mkdir -p "${BUILD_DIR_PATH}"

so_name=$("${ATSP_UTIL}"/so-name)

# XXX: not relying on the tree-sitter cli for building seems more
#      flexible.
#
#      on windows i had problems compiling using msys2 / mingw64 when
#      trying to use various tree-sitter subcommands.  to debug, i
#      ended up modifying the tree-sitter cli's source code to print
#      out precisely what the compiler invocation was.  that involved
#      writing some rust, recomplining the tree-sitter cli, and
#      running the invocation again.  that kind of thing seems like it
#      could be avoided by externalization as is dones below.
deprintf "* Compiling parser\n"
cc -fPIC -c -Isrc src/parser.c -o "${BUILD_DIR_PATH}/parser.o"

if [ -f src/scanner.c ]; then
  deprintf "* Compiling scanner\n"
  cc -fPIC -c -Isrc src/scanner.c -o "${BUILD_DIR_PATH}/scanner.o"
fi

if [ -f src/scanner.cc ]; then
  deprintf "* Compiling scanner\n"
  c++ -fPIC -Isrc -c src/scanner.cc -o "${BUILD_DIR_PATH}/scanner.o"
fi

deprintf "* Linking\n"
if [ -f src/scanner.cc ]; then
  c++ -fPIC -shared "${BUILD_DIR_PATH}"/*.o \
      -o "${BUILD_DIR_PATH}/${so_name}"
else
  cc -fPIC -shared "${BUILD_DIR_PATH}"/*.o \
      -o "${BUILD_DIR_PATH}/${so_name}"
fi

deprintf "* Result is at:\n"
deprintf "    %s\n" "${BUILD_DIR_PATH}/${so_name}"

cd "${cur_dir}" || exit 1

deprintf "Done\n"
